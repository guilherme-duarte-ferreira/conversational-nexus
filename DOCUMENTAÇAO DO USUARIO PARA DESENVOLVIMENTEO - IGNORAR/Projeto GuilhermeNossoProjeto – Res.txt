Projeto Guilherme/NossoProjeto ‚Äì Resumo Expandido
Status: Em desenvolvimento ativo | Vers√£o: 1. 2. 0 | √öltima Atualiza√ß√£o: 25/05/2024

1. Vis√£o Geral do Projeto
Objetivo Principal:
Criar uma interface de IA conversacional avan√ßada com:
- Armazenamento persistente de hist√≥rico de conversas
- Sistema RAG (Retrieval-Augmented Generation) para respostas contextualizadas
- Arquitetura modular e escal√°vel

Tecnologias-Chave:
| Componente | Tecnologias Usadas |
|--------------------------|--------------------------------------------|
| Backend | Python, FastAPI/Flask, SQLAlchemy ORM |
| Banco de Dados | SQLite (fase atual) ‚Üí PostgreSQL + PGVector |
| IA Conversacional | GPT-4, Lovable (IA auxiliar) |
| Processamento de Texto | SpaCy, Hugging Face Transformers |
| Interface | OpenWebUI (base) + Customiza√ß√µes |

Equipe de Desenvolvimento:
- Voc√™ (Usu√°rio): L√≠der t√©cnico, tomador de decis√µes estrat√©gicas
- ChatGPT (Eu): Arquiteto de sistemas e consultor t√©cnico
- Lovable (IA): Especialista em an√°lise de c√≥digo e otimiza√ß√£o

2. Estrutura Detalhada do Projeto
```
ProjetoGuilherme/
‚îú‚îÄ‚îÄ app. py Ponto de entrada principal (Flask/FastAPI)
‚îú‚îÄ‚îÄ backend/
‚îÇ ‚îú‚îÄ‚îÄ database/
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ database. py Conex√£o com DB, sess√µes e inicializa√ß√£o
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ migrations/ Scripts de migra√ß√£o (Alembic)
‚îÇ ‚îú‚îÄ‚îÄ models/ Modelos de dados
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ conversations. py Conversas (ID, t√≠tulo, metadados)
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ messages. py Mensagens (relacionamento 1:N)
‚îÇ ‚îú‚îÄ‚îÄ routers/ Endpoints API
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ chats. py CRUD para conversas/mensagens
‚îÇ ‚îî‚îÄ‚îÄ utils/
‚îÇ ‚îú‚îÄ‚îÄ chat_history. py Gerenciamento de hist√≥rico
‚îÇ ‚îî‚îÄ‚îÄ text_processor. py Pr√©-processamento de texto
‚îî‚îÄ‚îÄ requirements. txt Depend√™ncias do projeto
```

3. Plano de Desenvolvimento (Roadmap)

Fase 1: CRUD com SQLite (Atual)
Status: 85% completo
Tarefas:
- [x] Configura√ß√£o inicial do SQLAlchemy
- [x] Modelagem de dados (Conversas ‚Üî Mensagens)
- [ ] ~~Implementa√ß√£o completa de migra√ß√µes com Alembic~~ (Adiado)
- [x] Endpoints b√°sicos para:
- Cria√ß√£o de conversas
- Armazenamento de mensagens
- Recupera√ß√£o de hist√≥rico
- [ ] Testes automatizados com pytest (Em andamento)

Problemas Recentes:
- Tabelas n√£o criadas automaticamente
- Tipos de dados incompat√≠veis (JSON no SQLite)
- Relacionamentos n√£o persistentes

Solu√ß√µes Implementadas:
1. Substitui√ß√£o de `JSON` ‚Üí `TEXT`
2. For√ßar cria√ß√£o via `Base. metadata. create_all()`
3. Padroniza√ß√£o de UUIDs como `VARCHAR(36)`

Fase 2: Migra√ß√£o para PostgreSQL
Previs√£o: Junho/2024
Preparativos:
1. Dockerizar ambiente PostgreSQL
2. Configurar PGVector para embeddings
3. Script de migra√ß√£o SQLite ‚Üí PostgreSQL

Benef√≠cios Esperados:
- Suporte nativo a JSON
- Escalabilidade vertical
- Integra√ß√£o com bancos vetoriais

Fase 3: Implementa√ß√£o do RAG
Componentes Necess√°rios:
1. Pipeline de Embeddings:
- Modelo: `all-MiniLM-L6-v2` (Hugging Face)
- Armazenamento: PGVector/ChromaDB
2. Mecanismo de Busca:
- Similaridade de cosseno
- Filtragem por contexto temporal
3. Integra√ß√£o com IA:
- Prompt engineering com contexto recuperado

Fase 4: Otimiza√ß√£o e Seguran√ßa
Checklist:
- [ ] Rate limiting
- [ ] Autentica√ß√£o JWT
- [ ] Criptografia em repouso (SQLCipher)
- [ ] Sistema de backup automatizado

4. Fluxo de Trabalho Atual
```mermaid
graph TD
A[Usu√°rio Envia Mensagem] --> B[chat_history. py]
B --> C{Conversa Existe? }
C -->|Sim| D[Message. create()]
C -->|N√£o| E[Conversation. create()]
D --> F[Atualiza√ß√£o no SQLite]
E --> F
F --> G[Resposta da IA]
G --> H[Log de Intera√ß√£o]
```

5. Divis√£o de Responsabilidades
| Componente | Respons√°vel | Apoio T√©cnico |
|-------------------------|---------------------|---------------------|
| Arquitetura do Sistema | Voc√™ | ChatGPT |
| Modelagem de Dados | ChatGPT + Lovable | SQLAlchemy Docs |
| Integra√ß√£o de IA | Lovable | Hugging Face |
| Testes e Valida√ß√£o | Voc√™ | pytest |
| Documenta√ß√£o | ChatGPT | MkDocs |

6. Desafios T√©cnicos em Curso
Problema 1: Inconsist√™ncia nas Migra√ß√µes
- Causa: Conflito entre ORM e SQL puro
- Solu√ß√£o Provis√≥ria: Desativar cria√ß√£o via SQL

Problema 2: Serializa√ß√£o de Datetimes
- Sintoma: `TypeError: Object of type datetime is not JSON serializable`
- Solu√ß√£o: Usar `isoformat()` em timestamps

Problema 3: Performance em Consultas
- Monitorar: Query times > 500ms
- A√ß√£o: Adicionar √≠ndices em `conversation_id`

7. Pr√≥ximos Passos Imediatos
1. Finalizar testes de persist√™ncia
```bash
python3 -m pytest tests/ -v
```
2. Implementar sistema de logging unificado
3. Criar Dockerfile para ambiente de produ√ß√£o
4. Documentar endpoints API com Swagger

8. Notas para Continuidade
1. Backup Di√°rio:
```bash
sqlite3 nosso_projeto. db ". backup backup/$(date +%Y%m%d). db"
```
2. Monitoramento:
- Verificar tamanho do DB:
```bash
du -h backend/database/nosso_projeto. db
```

Estou preparado para continuar em qualquer ponto espec√≠fico! Qual aspecto devemos explorar agora? üõ†Ô∏è