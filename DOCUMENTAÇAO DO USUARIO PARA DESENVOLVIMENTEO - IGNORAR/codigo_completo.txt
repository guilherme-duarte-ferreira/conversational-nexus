Conteúdo de app.py:
from flask import Flask, render_template, request, jsonify, Response
import json
from datetime import datetime
import requests
from backend.database.database import init_db
from backend.utils.chat_history import save_conversation, get_conversation_history
from backend.utils.text_processor import split_text
from backend.routers.chats import chats_bp
from backend.models.conversations import Conversation  # Importando o modelo de conversas

app = Flask(__name__, static_folder='static')
app.secret_key = 'sua_chave_secreta_aqui'

# Inicializa o banco de dados
init_db()

# Registra o blueprint das rotas de chat
app.register_blueprint(chats_bp, url_prefix='/api/chats')

API_URL = "http://localhost:11434/v1/chat/completions"
MODEL_NAME = "gemma2:2b"

@app.route('/')
def home():
    conversations = get_conversation_history()
    return render_template('index.html', conversations=conversations)

@app.route('/send_message', methods=['POST'])
def send_message():
    data = request.json
    message = data.get('message', '')
    conversation_id = data.get('conversation_id')

    if len(message.split()) > 300:
        chunks = split_text(message)
        responses = []
        for chunk in chunks:
            response = process_with_ai(chunk)
            responses.append(response)
        final_response = " ".join(responses)
    else:
        final_response = None

    def generate_streamed_response():
        for part in process_with_ai_stream(message):
            yield f"data: {json.dumps({'content': part})}\n\n"

    response = Response(generate_streamed_response(), content_type="text/event-stream")
    response.headers['Cache-Control'] = 'no-cache'

    if final_response is not None:
        if conversation_id is None:  # Verifica se o conversation_id é None
            conversation_id = Conversation.create()  # Gera um novo conversation_id
        conversation_id = save_conversation(message, final_response, conversation_id)

    return response

def process_with_ai(text):
    try:
        payload = {
            "model": MODEL_NAME,
            "messages": [
                {"role": "system", "content": "Você é um assistente útil."},
                {"role": "user", "content": text}
            ],
            "stream": False
        }
        headers = {"Content-Type": "application/json"}
        response = requests.post(API_URL, json=payload, headers=headers)
        response.raise_for_status()

        response_data = response.json()
        if 'choices' in response_data and len(response_data['choices']) > 0:
            return response_data['choices'][0]['message']['content']
        return "Erro: Nenhuma resposta válida recebida da IA."
    except requests.exceptions.RequestException as e:
        print(f"[Debug] Erro na requisição HTTP: {str(e)}")
        return "Ocorreu um erro ao se conectar com a IA."
    except Exception as e:
        print(f"[Debug] Erro inesperado: {str(e)}")
        return "Ocorreu um erro inesperado ao processar sua mensagem."

def process_with_ai_stream(text):
    try:
        payload = {
            "model": MODEL_NAME,
            "messages": [
                {"role": "system", "content": "Você é um assistente útil."},
                {"role": "user", "content": text}
            ],
            "stream": True
        }
        headers = {"Content-Type": "application/json"}
        response = requests.post(API_URL, json=payload, headers=headers, stream=True)
        response.raise_for_status()

        for line in response.iter_lines(decode_unicode=True):
            if line.strip() and line.startswith("data: "):
                line = line[6:].strip()
                try:
                    response_data = json.loads(line)
                    if 'choices' in response_data and len(response_data['choices']) > 0:
                        delta = response_data['choices'][0]['delta']
                        if "content" in delta:
                            content = delta["content"].encode('latin1').decode('utf-8', errors='ignore')
                            yield content
                except json.JSONDecodeError:
                    print(f"[Debug] Erro ao decodificar JSON: {line}")
    except requests.exceptions.RequestException as e:
        print(f"[Debug] Erro na requisição HTTP: {str(e)}")
    except Exception as e:
        print(f"[Debug] Erro inesperado: {str(e)}")

if __name__ == '__main__':
    app.run(debug=True)


Conteúdo de atualiza-git.bat:
@echo off

:: Altere para o diretorio onde o script esta localizado
cd /d %~dp0

:menu
cls
echo Diretorio atual: %cd%
echo =====================================
echo     GIT AUTOMATION MENU
echo =====================================
echo 1. Verificar status do repositorio
echo 2. Adicionar todas as alteracoes
echo 3. Fazer commit
echo 4. Fazer push para o GitHub
echo 5. Fazer pull do repositorio
echo 6. Mostrar log de commits
echo 7. Outras opcoes
echo 8. Sair
echo =====================================
set /p escolha="Escolha uma opcao: "

if %escolha%==1 goto status
if %escolha%==2 goto add
if %escolha%==3 goto commit
if %escolha%==4 goto push
if %escolha%==5 goto pull
if %escolha%==6 goto log
if %escolha%==7 goto outras_opcoes
if %escolha%==8 goto fim
goto menu

:status
echo Diretorio atual: %cd%
echo Verificando o status do repositorio...
git status
pause
goto menu

:add
echo Diretorio atual: %cd%
echo Adicionando todas as alteracoes...
git add .
pause
goto menu

:commit
set /p comentario="Digite o comentario do commit: "
echo Diretorio atual: %cd%
git commit -m "%comentario%"
pause
goto menu

:push
echo Diretorio atual: %cd%
echo Fazendo push para o GitHub...
git push
pause
goto menu

:pull
echo Diretorio atual: %cd%
echo Fazendo pull do repositorio...
git pull
pause
goto menu

:log
echo Diretorio atual: %cd%
echo Mostrando log de commits...
git log
pause
goto menu

:outras_opcoes
cls
echo Outras opcoes
echo =====================================
echo 1. Restaurar arquivos deletados
echo 2. Sincronizar com repositorio
echo 3. Fazer fetch do repositorio
echo 4. Fazer merge de branches
echo 5. Inicializar um novo repositorio (git init)
echo 6. Desfazer alteracoes (git reset)
echo 7. Listar branches (git branch)
echo 8. Voltar ao menu principal
echo =====================================
set /p escolha_outras="Escolha uma opcao: "

if %escolha_outras%==1 goto restaurar
if %escolha_outras%==2 goto sincronizar
if %escolha_outras%==3 goto fetch
if %escolha_outras%==4 goto merge
if %escolha_outras%==5 goto init
if %escolha_outras%==6 goto reset
if %escolha_outras%==7 goto branch
if %escolha_outras%==8 goto menu
goto outras_opcoes

:restaurar
echo Restaurando arquivos deletados...
git checkout -- .
pause
goto outras_opcoes

:sincronizar
echo Sincronizando com repositorio...
git fetch origin
pause
goto outras_opcoes

:fetch
echo Fazendo fetch do repositorio...
git fetch
pause
goto outras_opcoes

:merge
echo Fazendo merge de branches...
git merge
pause
goto outras_opcoes

:init
echo Inicializando um novo repositorio...
git init
pause
goto outras_opcoes

:reset
echo Desfazendo alteracoes...
git reset
pause
goto outras_opcoes

:branch
echo Listando branches...
git branch
pause
goto outras_opcoes

:fim
echo Saindo...
pause


Conteúdo de database.py:
import sqlite3
from contextlib import contextmanager
import os

DATABASE_PATH = 'data/chat_history.db'

def ensure_data_directory():
    """Garante que o diretório data/ existe"""
    os.makedirs('data', exist_ok=True)

def init_db():
    """Inicializa o banco de dados e cria as tabelas se não existirem"""
    ensure_data_directory()
    with get_db() as db:
        db.execute('''
            CREATE TABLE IF NOT EXISTS conversations (
                id TEXT PRIMARY KEY,
                title TEXT NOT NULL,
                timestamp TEXT NOT NULL,
                meta JSON
            )
        ''')
        
        db.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id TEXT PRIMARY KEY,
                conversation_id TEXT NOT NULL,
                role TEXT NOT NULL,
                content TEXT NOT NULL,
                timestamp TEXT NOT NULL,
                FOREIGN KEY (conversation_id) REFERENCES conversations (id)
                ON DELETE CASCADE
            )
        ''')
        db.commit()

@contextmanager
def get_db():
    """Context manager para conexão com o banco"""
    ensure_data_directory()
    conn = sqlite3.connect(DATABASE_PATH)
    conn.row_factory = sqlite3.Row
    try:
        yield conn
    finally:
        conn.close()

Conteúdo de conversations.py:
from datetime import datetime
import json
import uuid
from backend.database.database import get_db

class Conversation:
    @staticmethod
    def create(title="Nova Conversa"):
        """Cria uma nova conversa"""
        conversation_id = str(uuid.uuid4())
        timestamp = datetime.now().isoformat()
        
        with get_db() as db:
            db.execute(
                'INSERT INTO conversations (id, title, timestamp, meta) VALUES (?, ?, ?, ?)',
                (conversation_id, title, timestamp, '{}')
            )
            db.commit()
        return conversation_id

    @staticmethod
    def get_all():
        """Retorna todas as conversas"""
        with get_db() as db:
            cursor = db.execute(
                'SELECT * FROM conversations ORDER BY timestamp DESC'
            )
            return cursor.fetchall()

    @staticmethod
    def get_by_id(conversation_id):
        """Busca uma conversa específica pelo ID"""
        with get_db() as db:
            cursor = db.execute(
                'SELECT * FROM conversations WHERE id = ?',
                (conversation_id,)
            )
            return cursor.fetchone()

    @staticmethod
    def update(conversation_id, title=None, meta=None):
        """Atualiza uma conversa existente"""
        updates = []
        params = []
        
        if title is not None:
            updates.append('title = ?')
            params.append(title)
        if meta is not None:
            updates.append('meta = ?')
            params.append(json.dumps(meta))
            
        if not updates:
            return False
            
        query = f'UPDATE conversations SET {", ".join(updates)} WHERE id = ?'
        params.append(conversation_id)
        
        with get_db() as db:
            db.execute(query, params)
            db.commit()
            return True

    @staticmethod
    def delete(conversation_id):
        """Deleta uma conversa e suas mensagens"""
        with get_db() as db:
            db.execute('DELETE FROM messages WHERE conversation_id = ?', (conversation_id,))
            db.execute('DELETE FROM conversations WHERE id = ?', (conversation_id,))
            db.commit()
            return True

Conteúdo de messages.py:
from datetime import datetime
import uuid
from backend.database.database import get_db

class Message:
    @staticmethod
    def create(conversation_id, role, content):
        """Cria uma nova mensagem"""
        message_id = str(uuid.uuid4())
        timestamp = datetime.now().isoformat()
        
        with get_db() as db:
            db.execute(
                'INSERT INTO messages (id, conversation_id, role, content, timestamp) VALUES (?, ?, ?, ?, ?)',
                (message_id, conversation_id, role, content, timestamp)
            )
            db.commit()
        return message_id

    @staticmethod
    def get_by_conversation(conversation_id):
        """Retorna todas as mensagens de uma conversa"""
        with get_db() as db:
            cursor = db.execute(
                'SELECT * FROM messages WHERE conversation_id = ? ORDER BY timestamp ASC',
                (conversation_id,)
            )
            return cursor.fetchall()

    @staticmethod
    def get_by_id(message_id):
        """Busca uma mensagem específica pelo ID"""
        with get_db() as db:
            cursor = db.execute(
                'SELECT * FROM messages WHERE id = ?',
                (message_id,)
            )
            return cursor.fetchone()

Conteúdo de chats.py:
from flask import Blueprint, jsonify, request
from backend.models.conversations import Conversation
from backend.models.messages import Message

chats_bp = Blueprint('chats', __name__)

@chats_bp.route('/conversations', methods=['GET'])
def get_conversations():
    """Retorna lista de todas as conversas"""
    conversations = Conversation.get_all()
    return jsonify([dict(conv) for conv in conversations])

@chats_bp.route('/conversations', methods=['POST'])
def create_conversation():
    """Cria uma nova conversa"""
    data = request.json
    title = data.get('title', 'Nova Conversa')
    conversation_id = Conversation.create(title)
    return jsonify({'id': conversation_id})

@chats_bp.route('/conversations/<conversation_id>', methods=['GET'])
def get_conversation(conversation_id):
    """Retorna uma conversa específica com suas mensagens"""
    conversation = Conversation.get_by_id(conversation_id)
    if not conversation:
        return jsonify({'error': 'Conversa não encontrada'}), 404
        
    messages = Message.get_by_conversation(conversation_id)
    return jsonify({
        'conversation': dict(conversation),
        'messages': [dict(msg) for msg in messages]
    })

@chats_bp.route('/conversations/<conversation_id>/messages', methods=['POST'])
def add_message(conversation_id):
    """Adiciona uma nova mensagem a uma conversa"""
    data = request.json
    role = data.get('role')
    content = data.get('content')
    
    if not all([role, content]):
        return jsonify({'error': 'Dados incompletos'}), 400
        
    message_id = Message.create(conversation_id, role, content)
    return jsonify({'id': message_id})

@chats_bp.route('/conversations/<conversation_id>', methods=['DELETE'])
def delete_conversation(conversation_id):
    """Deleta uma conversa e suas mensagens"""
    if Conversation.delete(conversation_id):
        return jsonify({'success': True})
    return jsonify({'error': 'Erro ao deletar conversa'}), 400

Conteúdo de chat_history.py:
from backend.models.conversations import Conversation
from backend.models.messages import Message

def save_conversation(message, response, conversation_id=None):
    """
    Salva ou atualiza uma conversa no banco de dados.
    Se conversation_id for fornecido, adiciona mensagens à conversa existente.
    Caso contrário, cria uma nova conversa.
    """
    if not conversation_id:
        conversation_id = Conversation.create()
        
    Message.create(conversation_id, 'user', message)
    Message.create(conversation_id, 'assistant', response)
    
    return conversation_id

def get_conversation_history():
    """Retorna o histórico completo de conversas"""
    conversations = Conversation.get_all()
    history = []
    
    for conv in conversations:
        messages = Message.get_by_conversation(conv['id'])
        history.append({
            'id': conv['id'],
            'timestamp': conv['timestamp'],
            'messages': [dict(msg) for msg in messages]
        })
    
    return history

def get_conversation_by_id(conversation_id):
    """Busca uma conversa específica com suas mensagens"""
    conversation = Conversation.get_by_id(conversation_id)
    if not conversation:
        return None
        
    messages = Message.get_by_conversation(conversation_id)
    return {
        'id': conversation['id'],
        'timestamp': conversation['timestamp'],
        'messages': [dict(msg) for msg in messages]
    }

Conteúdo de text_processor.py:
def split_text(text, words_per_chunk=300):
    """
    Divide um texto em chunks menores baseado no número de palavras.
    """
    words = text.split()
    chunks = []
    
    for i in range(0, len(words), words_per_chunk):
        chunk = ' '.join(words[i:i + words_per_chunk])
        chunks.append(chunk)
    
    return chunks

Conteúdo de __init__.py:
# Este arquivo vazio torna o diretório utils um módulo Python

Conteúdo de __init__.py:
# Este arquivo vazio torna o diretório backend um módulo Python

Conteúdo de desktop.ini:
[.ShellClassInfo]
IconResource=folderico-red.ico,0


Conteúdo de folderico-red.ico:
           /     PNG

   
IHDR         \rf   	pHYs    +    IDATx}-U߯s3f&$LF2&"&ٹ7HO03y 	0OQB. {m1Bp }szZjUUO:ۻjZ7@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @e& o-WW+X/mz$[i}zr+[,+
WƼҶX?|@Y`*Wح]In']0eHXn)оiLݤP\7/1\|| "Lv*	-5*S \I22Cp. +,9oڼ@β x>E* I ʂڒ|
^W.<
+4cy P{`,8ހ`?YoJ$[[G+.(\bM+/<67!
`?&xjJDIxgI5IpJ">f
/4C0
^c$pQnIOu!O'BLI0p[u!	_9x0'm?UCYE_ s֗iu/TPn! fy@M	xד 	~	Z| GD`}IT&IY?V1}7̈́z}J&Sa_DKi5LCX_GTA,'b=TeTXFSd$Av$<Vh걝Xw@/F _7bpN{R-j8y(A73
]X[8/~h}K_0"H\udɳY$
4rM^ody}CKh{wDzۍo7*! t6lݬm?doՋaDIL-y ,q^pvm_~C !~˅XdYAm\Јb-<@R	AB_ga
a	$pE?``0F$ӟ̺.7wn]]ىTW$/.<6YrЂz/3%[Atd		~`Hb	Wp5UXTO)wtFy $0i"m
뛔Hs5|辂}Y&_ϼkN__v\Ww#)Q9*<dH!էp	"!.DG+k+wӵ/	>xBCٮ*Dy$#0,+vA_}FP-gB
T.e7UR 7)/a$lS7xN jjo 09LV\_2R[|0hAtbD0s![Ng֘tYnɥsC:ott_r%SJ1/wRȞg!#)pcؖԸBNܮm;;zgLr)>_fv~:6iiv<H
 V.G,S?YMNI<}HRbY3
I[aɿepi9ەv")p`bZ ܒL^*d	ށg me8k_fd'9)P{W")B3pPI--vk4>,3
Vw&_ZR}FdZ`.@B-9ٽL	fרu=lׇa/#|ɐϬ+Gos0v	&J\?w^~W& 2Kw\h)RDe4h;H"J&W2} >3\SU_Z0'OKehBwE
l&s͊WAKcB&rڙ"')d:w'5zFc<y5 ঋ"^J.J'xC; ͒2rD!&NaFnpGgجl.7pg)'%D:4{G70hrIDP:&4gEesuE')-R_C1$	RK\M";@|o`f4x.l`2eFxӱ.4+<6?m7uaلyM
B'H`IB|!23)4dhXR)(\V$E- <O=i;	)cgVOvDōӧքo-3\{4"e<+pʴ`}M`}X޺KV?-J2N_ֶxhHJVo]{
nT b,*C+!NIǡ̅Ѡh_UƂ:$y6a,=L!Qr\t=^5ږ y HC¯o)_+3C-eU 6} oqB%ĝ"F+O4@2Jxi޾?-rkD$Zo Lɤ]OcA#L_D[%P-O~=e|,TN? oߌ]|qN?f},$MeJsm"C7z"(%+BOY ?#ԡIC*|)x.m< ݘp	n~)]
jչ0B.p~{ؓVB甐[&H	7^.l͛)
iɉ+R6A?Xu 8"YLz5m)um4q8s&&ň/eC(YPz
Js \iOWÕIK;dm'} 蕬_X~{@>,VzPSk--$m@3V7 ^_nm[$kL׎\nwT]s d%kJmA+I2;x
v^t^ ؕ^ `c=\p~)K&pVdLE1FHtr/3 hjCB *i;ef		]jT$!S]l\KM$E`|o
,"IA1 y2[ݟIKVd*aVl[iKu54JFs'Uğ(uJZMfyUR|i'˜C!&Oz){Ҿvj)W.'{{Y۸>z 
mAX'sސӱ򄃧}T) mgm	OI:B{ $C^ɾId{iW: R\Am{z^%= ¤%xcQ,q+ZpViބhlQ!SOUdn0Ϧ',HIB5Mr!MЭi
>I$!y)~b_ZSiw B~r-1Y5ޟS ^u-~V&ZWKf@׮{{{(էxR_ ,.ɚ$WBiфg01M^sxfq5nVd)ɒB-+@!)7%	'j5xf%
o|)$ =\[WKo݂2kB  Be޳?'q]~Blhdz2P߫^Q{m#|lAT83z6ȕFKUR<-<!
 i/|7LTT 9ޛ{ i5f^ݞsZ+yDÅ}e	|F/ `UR
zOC3j
==.YB7ĝX>zoV!ˀ[<~X>Z\&B.6}4{,zgdKk*_k%W_T!ѽ\@ZV9`B^ի]p-f
LWͻTv6h[8V[y'XCMO5 En!_e]03`gՑhx<a],Жf-(GyPbD``˗W|}5އeKk%m=VjFYP*xѺ߂{ѭ ^\WpqY{͓v>RaIBQ/V
ZO"1o-֎1YY)dTYiTֻ7N	^<Vf<ngTڠz7cz݃*ґus(Lfbu
^!Kz5%4J[|+˟3wk=<JĥV(5ϣT^Ϧw^Eum{YyݷԳ`F\I.^yYwYs5t<$Ѯ=ъ_<^Gqշ
tfGnHHT;6֥
OJÂ#=<h&gf;:ӱmڇqﵑs"B
=|\K~z m"<=ZLq-֡{anO;?J-ZEӮZYJ|A(snDF])0Kk
񲥐F|vƪ{ -*{܋/_2nldn<ȮՅmŨZ[GهqSRxƾt̮K,7/5R9j00s*ߪ3szwGar^4:Ҷ<J%W҇O*gk#qCy)DgN+rliJ9AYKYs"#п@	O<gҿjiKz= .V΅s뙫=*Z="gТ!5Z$遜-5-a,mXYSI<f
ri\z1Mx}Kʔh{o9[5(z4<j{jg22ujt}GsNeӲ\F3-,C0Z|4tf
'æz<KIГ_P}!
ݟg+>*V3&trk2=ķ7/PR=͵t]:	imũ mf(~%7bRw:0K{T^} !֟ɷwưIXH<ŧJq <j{59
fٔ
d_O{Dd-a4M	>`{G-Zw42ֵB/Y~m[S{5cOџכ=W&$=k\g/$oãX?}֗x.-yRhҊK	H
>ӚDhMɲxa<OQS:ҽhir5^Z.ǁGQ_YĚ[IVU3f#v
F>N?3ށDMmB>ݝWފByG^%$|oo'យ4BgKzl֛O*^>z^3}@jhY4ryYNG_he5uJ5u<|f)1{'fe\[VY~߲h)W矵u|f;8uZlZ_ImRO_onĆY0Spuo9;T<k
<[,ܣ0ء 84z@dv'*{|kv
3+q<8Iq1yY+gφn(Fi1iMbz. F3~\s,tR!?Py~f?8%0%ڃ"#xOkuk=Tnx>YsI{̀_ьպw&nMֽV \Z~Iv[FV^Q|uFSZgk4,ChUn~ų	#m5K8[K^7QX8@җzE~VXVQ8%ZdRsťuJgkkxJ\kz?eU=.y{yi1	vrtB,Xxp-@=y5@ڟ{[}gJ0k4=ʐ׵BtK,Mz]݃;G,ῇy<~xv-%-1^c
zvo0,0 e k=MkZR~@S_K>tk~u?{/)XrҷSZV dX2<ýgY7q5i=YxA>3fgTG{zyx}xGhKƉ=ۥ߲ ssL3#u> l(X^sIh=S=59 [#3r{p/I[?[kdU%ܢ4{%^+5$	]doh1{ygw;֋֞{+|#,=ωXгRj5xs]k]hnef<SK(sA$||ZIJEӟR%"Y#oXFio(,՝P@lja9^nhj=o.PB7Z~bKhk[]wko
韽Ga92bg0s%/gJȢh-G{9wy#in1}"L̒8m

~B)D&U#:7y~zsV3 V|.%ۢ8gE%jg%dZ?
;fSY?0$	Cnkk$ԶГ]>x^??0wdKFkgY&ISUiDYa)WTǲ-VRCv>@rphx`Gy8 by;YI=g0U귮QfYU-AQe[ D;~鯶^{FYhS,wu9ӓbhLo[H?I$s]_o[ɲ:fy{{x߂}	C< q]w|-{{#U=ޢ9
um%l
CMK-5^!'"5uc
RVɩ71hݷ?k7=ޟ	ix&M]UB|ϋu}+)oQ|FS޲#vi{&
d
8LF^50#|rjݳ`nP#0ȧjyKtFj!7,uG(O˳]|qw= IQ-ZA-.P2,}7Q%ODQDMY\zv^o[YނidV3k8˭Rg#xc{^wteƚ~Oe\~F_5+8}K{޺+ZڷkW`ơx^t{ I MnjM5;<GA7Yix$~jG?Ge)f-yꝁaY_g־{6H|4`R9ʎ8S-d90:fX|ᇁf5Z,Z˺[H.>__?6~k<
+^OŬ]|:=8zVҋNuDnS.մ+znӴNZ"RH^,׹\k'S^³!  ?IDAT] :JV_ZN(o¥))[vYvUA*E qԳxVsk%!X*kaM[I{xc-+)rh%\kHzo;jFzN҄kYRj5u-^ڨכ{ʴ[( _ZߴSЃN@C,zްQgG/<4AǢ
fϳz:׳ZD-̾vi=Ԅ-%V}3pw{bRV^^)mJ+'C8VaоFS-5ݒ#\M^~m]kg9?-ozB
MZc}
Uf#= lŲ%\ui]bޱxKzy3,L8+?q/`q\37ås%7+׍1cYkqQN|VX!ZpZ%r]@aYJ^N!%JďO]hvTJ6JZ~gvOL JH Ku5Htϲ?6[| QNTL zF(ӖYKYKjֺd-e<-vXyq␞yvL=
؛,]y&w-/e)-~5gGX{x 8DrM
z,u7'{뎜T-g#,mu^n8UG)OCz+WWAPş-XҦfr# ,kKZT|$C(</]ua'Μm9/^G[f&@[i=:Y{WpKCjM
Z&+-YR{FYY)eqe$kL|ɺ{؇ֳ8 [{;qJey8cqegmg-3R{5egj/	He~Z&A6p,;ou@kꝅY¯7\;dEBT,']Ou[(YXNO]«eH_ֺVO3=V֣X-{P%ю! Z.=UGӖ55ӂ{q-?kxп1#h)kj|[{,Z w.\WC)X"3`;yFo,2@EӔx5KA&i.sof^^Bmyh,wZ~fTI@dZٿZ}IjrArL	S\h	,	_/C2'h8AߕV'ª4fl䱎ՙeRxӒ#kcڽyx9ʗXT޺mţ7g͝v.GI,.q9|]a,np)ҺZ>-o7Ʒg9SB nAuB/eFC[F
̱whV[hDCOK4ϘW@ěWӗ`^~7|)<&u.`N,ۣPV
z-@9	/{	chVCt5Y=	0~/F(B [a(gu=5ЬKaǌ,C|yb|
$(O3[%~%!2^5.i[{~|Fykcr#F iVR_b[Y҆e-)V\à32VomѶGSJ᱂iq`	\(negLT^o1|/Zл>k,j[u,
2=d[,Y*0mّ%x5qxy} ފ \6\Fk};gCk>rBҪ{BYN@{h)B^{=w
^)Hy߫ocY}\Vf.
8$و	Jw	*",a%oyxV=}˙)PBk#Kkt:yU˻/%Zޢd|NQuGzBeQ@{<WZS<;fz\}k{mi-}3tLJBDw'w=[dëUnR70Dܛ󄂽=EF@NZę	q}JkTQ,!e\g*iIS{7hj-eQ~=ɬ5XgHYxk}MhڃeW-k;	<}h3 `OfyՂٓ^onC[⟁1[}oMk֙6vYGѣH
[PF{r3ƲGseT]Zd/hA%+˃ЮmiCl(zGRz+ =s:W ;o4Z+Tz
k[.<chI1AZrZST6/UU^ 59('!o4|Z7N։jדNįkH[߳l5CkB-JojԶ '&1@ٵ1ŷ 	ڊyJujZ=-<]⥙g
|h˪*;+ַe{vɸ^ Mbao=_1Iq iMEe=V#pbNpGK.޳wUǲJe#շQb_KNҞ->V*ZrgKvKXѳGcQ*^7VNkD$T?پ^o*PExd CfYzL:>-<F΀EׄOX<k^"/^SU X|hNV } ׆NIkd\{
G[b(mφYxs vlqb ) cW  .W<O5,LЉqkt5cD(fEPh$Z]0{~#C`\e1/-]&F(xo* XI,,s$kcH .Bn'EÄvJ9B~.,BW:Ǎ_Ih4iׅ
CB;X١_as
x/{[;`Ms}19ؗ
 /|-NZj	XT
ڀ*Ar_O@K`_$e"S\K9]XɅ|ϔ` }b/k^'ݤȼJ?\Binof\H_JL2j,
|]h_
?pՠUrv}M->iAX6tǎm,X^Xt. O4n&0DMib+25pSA_7+,Y_/yaKXEc73K>Z/]
 
 n%KnEkDt>VYe`4xQzOmϬ@X	+%N#c'
< KZ{ O3^=ާ}&iO>/']߻ ڀ@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ Y"ޞ    IENDB`

Conteúdo de README.md:
# Documentação Técnica do ChatAI

![Arquitetura do Sistema](https://via.placeholder.com/800x400?text=Diagrama+de+Arquitetura+do+Sistema)  
*Diagrama simplificado do fluxo de dados e componentes principais*

## 1. Visão Técnica do Sistema

### 1.1 Stack Tecnológica
- **Backend**: Flask 2.0.2
- **Banco de Dados**: SQLite (Desenvolvimento), PostgreSQL (Produção)
- **ORM**: SQLAlchemy 1.4
- **Processamento de Texto**: NLTK 3.6.7
- **Interface**: HTML5, Bootstrap 5.1, JavaScript ES6
- **Gerenciamento de Pacotes**: Poetry 1.2

### 1.2 Princípios de Design
- Padrão MVC (Model-View-Controller)
- Injeção de Dependência para gestão de banco de dados
- RESTful API design
- Princípios SOLID para estruturação de classes

## 2. Estrutura do Projeto (Detalhada)

```
ChatAI/
├── app.py                     # Ponto de entrada principal
├── config/
│   ├── __init__.py            # Configurações de ambiente
│   ├── settings.py            # Parâmetros de configuração
│   └── constants.py           # Constantes globais
├── backend/
│   ├── database/
│   │   ├── connectors.py      # Implementações de conexão
│   │   ├── crud.py            # Operações CRUD genéricas
│   │   └── migrations/        # Alembic migrations
│   ├── models/
│   │   ├── base.py            # Modelo base SQLAlchemy
│   │   ├── conversation.py    # Entidade Conversation
│   │   └── message.py         # Entidade Message
│   ├── routes/
│   │   ├── api/
│   │   │   └── v1/           # Versionamento de API
│   │   │       └── chats.py   # Endpoints REST
│   │   └── web.py             # Rotas web
│   ├── services/
│   │   ├── ai_processor.py    # Integração com IA
│   │   └── history_manager.py # Gestão de histórico
│   └── utils/
│       ├── decorators.py      # Decoradores customizados
│       └── validators.py      # Validação de dados
├── static/
│   ├── css/                   # Estilos customizados
│   ├── js/                    # Lógica frontend
│   └── assets/                # Imagens e recursos
├── templates/                 # Jinja2 templates
│   ├── layouts/               # Layouts base
│   └── pages/                 # Páginas específicas
├── tests/                     # Testes automatizados
├── pyproject.toml             # Configuração Poetry
└── .env.example               # Variáveis de ambiente
```

## 3. Configuração do Ambiente

### 3.1 Pré-requisitos
- Python 3.9+
- SQLite3
- Node.js (para assets build)

### 3.2 Instalação
```bash
# Clonar repositório
git clone https://github.com/seu-usuario/chat-ai.git
cd chat-ai

# Configurar ambiente virtual
python -m venv venv
source venv/bin/activate  # Linux/MacOS
venv\Scripts\activate     # Windows

# Instalar dependências
poetry install

# Configurar variáveis de ambiente
cp .env.example .env
```

### 3.3 Configuração do Banco de Dados
```python
# config/settings.py
class Config:
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL', 'sqlite:///../data/chat.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
```

## 4. Modelos de Dados

### 4.1 Diagrama ER
![Diagrama Entidade-Relacionamento](https://via.placeholder.com/600x300?text=Diagrama+ER+do+Banco+de+Dados)

### 4.2 Esquema do Banco
**Conversation**
- id: Integer (PK)
- title: String(255)
- created_at: DateTime
- updated_at: DateTime

**Message**
- id: Integer (PK)
- content: Text
- role: Enum('user','assistant')
- conversation_id: Integer (FK)
- created_at: DateTime

## 5. API Reference (v1)

### 5.1 Endpoints Principais

#### `GET /api/v1/conversations`
**Response:**
```json
{
  "data": [
    {
      "id": 1,
      "title": "Discussão sobre IA",
      "message_count": 5,
      "created_at": "2023-08-20T12:34:56Z"
    }
  ],
  "pagination": {
    "page": 1,
    "per_page": 20,
    "total_items": 1
  }
}
```

#### `POST /api/v1/conversations`
**Request:**
```json
{
  "title": "Nova Conversa",
  "initial_message": "Olá, como posso ajudar?"
}
```

#### `POST /api/v1/conversations/{id}/messages`
**Request:**
```json
{
  "content": "Explique o que é machine learning",
  "role": "user"
}
```

## 6. Fluxo de Processamento

```mermaid
sequenceDiagram
    participant Usuário
    participant Frontend
    participant Backend
    participant IA
    participant Banco de Dados
    
    Usuário->>Frontend: Envia mensagem
    Frontend->>Backend: POST /api/v1/messages
    Backend->>Banco de Dados: Registra mensagem
    Backend->>IA: Envia para processamento
    IA->>Backend: Retorna resposta
    Backend->>Banco de Dados: Registra resposta
    Backend->>Frontend: Retorna resposta formatada
    Frontend->>Usuário: Exibe resposta
```

## 7. Testes e Qualidade

### 7.1 Executando Testes
```bash
pytest tests/ --cov=backend --cov-report=html
```

### 7.2 Tipos de Testes
- **Testes Unitários**: Validação de modelos e utilitários
- **Testes de Integração**: Testes de API com requests mockados
- **Testes E2E**: Testes completos com Selenium

## 8. Deployment

### 8.1 Requisitos de Produção
- Gunicorn ou Waitress
- Reverse Proxy (Nginx)
- PostgreSQL
- Redis para cache

### 8.2 Dockerização
```dockerfile
FROM python:3.9-slim

WORKDIR /app
COPY . .
RUN pip install poetry && poetry install --no-dev

EXPOSE 5000
CMD ["poetry", "run", "gunicorn", "app:app", "-b", "0.0.0.0:5000"]
```

## 9. Segurança

### 9.1 Boas Práticas Implementadas
- Validação de entrada em todos os endpoints
- Sanitização de HTML nas mensagens
- Rate limiting (100 requests/minuto)
- Criptografia de dados sensíveis no banco

### 9.2 Melhorias Planejadas
- Implementação de OAuth2
- Adição de Web Application Firewall
- Auditoria de segurança periódica

## 10. Monitoramento

### 10.1 Métricas Chave
```python
# Exemplo de métrica com Prometheus
from prometheus_flask_exporter import PrometheusMetrics

metrics = PrometheusMetrics(app)
metrics.info('app_info', 'Application info', version='1.0.3')
```

### 10.2 Log Estruturado
```json
{
  "timestamp": "2023-08-20T12:34:56Z",
  "level": "INFO",
  "module": "database.connectors",
  "message": "Conexão estabelecida com sucesso",
  "duration_ms": 45.2,
  "conversation_id": 123
}
```

## 11. Referências e Links Úteis
- [Documentação Flask](https://flask.palletsprojects.com/)
- [Guia SQLAlchemy](https://docs.sqlalchemy.org/)
- [Políticas de Segurança](https://owasp.org/www-project-top-ten/)

---

Esta documentação oferece uma visão completa do sistema, desde a configuração inicial até considerações avançadas de produção. Para detalhes específicos de implementação, consulte os comentários no código e a documentação gerada automaticamente via Sphinx.

Conteúdo de backup.cssx:
:root {
    --bg-primary: #f7f7f8;
    --text-primary: #000000;
    --text-secondary: rgba(0, 0, 0, 0.7);
    --text-disabled: rgba(0, 0, 0, 0.5);
    --action-active: #000000;
    --action-hover: rgba(0, 0, 0, 0.08);
    --action-selected: rgba(0, 0, 0, 0.16);
    --action-disabled: rgba(0, 0, 0, 0.3);
    --action-disabled-background: rgba(0, 0, 0, 0.12);
    --msg-user: #e6e6e6;
    --msg-bot: #d9d9d9;
    --sidebar-bg: #ffffff;
    --input-bg: #ffffff;
    --border-color: rgba(0, 0, 0, 0.12);
}

[data-theme="dark"] {
    --bg-primary: #343541;
    --text-primary: #fff;
    --text-secondary: rgba(255, 255, 255, 0.7);
    --text-disabled: rgba(255, 255, 255, 0.5);
    --action-active: #fff;
    --action-hover: rgba(255, 255, 255, 0.08);
    --action-selected: rgba(255, 255, 255, 0.16);
    --action-disabled: rgba(255, 255, 255, 0.3);
    --action-disabled-background: rgba(255, 255, 255, 0.12);
    --msg-user: #444654;  /* Cor alterada para melhor contraste no modo escuro */
    --msg-bot: #444654;
    --sidebar-bg: #202123;
    --input-bg: #40414f;
    --border-color: rgba(255, 255, 255, 0.12);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    transition: background-color 0.2s, color 0.2s;
}

body {
    font-family: 'Inter', sans-serif;
    background-color: var(--bg-primary);
    color: var(--text-primary);
    overflow: hidden;
}

.container {
    display: flex;
    height: 100vh;
    position: relative;
}

/* Barra Lateral */
.sidebar {
    position: fixed;
    width: 260px;
    height: 100vh;
    background-color: var(--sidebar-bg);
    padding: 1rem;
    border-right: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    transition: transform 0.3s ease;
    z-index: 1000;
}

.sidebar.collapsed {
    transform: translateX(-260px);
}

.main-content {
    flex: 1;
    margin-left: 260px;
    transition: margin-left 0.3s ease;
    display: flex;
    flex-direction: column;
    height: 100vh;
}

.main-content.expanded {
    margin-left: 0;
}

.new-chat-btn {
    background-color: #19c37d;
    color: white;
    border: none;
    padding: 12px;
    border-radius: 5px;
    cursor: pointer;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
}

.new-chat-btn:hover {
    background-color: #15a76c;
}

.settings-btn {
    margin-top: auto;
    padding: 12px;
    border: none;
    border-radius: 5px;
    background-color: transparent;
    color: var(--text-primary);
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: background-color 0.2s;
}

.settings-btn:hover {
    background-color: var(--action-hover);
}

.search-box {
    position: relative;
    margin-bottom: 1rem;
}

.search-box input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    background-color: var(--input-bg);
    color: var(--text-primary);
}

.chat-list {
    flex: 1;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: var(--text-disabled) transparent;
}

.chat-list::-webkit-scrollbar {
    width: 5px;
}

.chat-list::-webkit-scrollbar-track {
    background: transparent;
}

.chat-list::-webkit-scrollbar-thumb {
    background-color: var(--text-disabled);
    border-radius: 20px;
}

.chat-item {
    padding: 0.75rem;
    border-radius: 5px;
    cursor: pointer;
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    transition: background-color 0.2s;
}

.chat-item:hover {
    background-color: var(--action-hover);
}

.chat-item .action-buttons {
    display: none;
    gap: 0.5rem;
}

.chat-item:hover .action-buttons {
    display: flex;
}

.chat-item .action-btn {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    padding: 0.5rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
}

.chat-item .action-btn:hover {
    background-color: var(--action-hover);
    color: var(--text-primary);
}

/* Top Bar */
.top-bar {
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    border-bottom: 1px solid var(--border-color);
    background-color: var(--bg-primary);
}

.top-bar-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.theme-toggle, .header-sidebar-toggle {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--action-hover);
    border: none;
    border-radius: 4px;
    color: var(--text-primary);
    cursor: pointer;
}

.theme-toggle:hover, .header-sidebar-toggle:hover {
    background: var(--action-selected);
}

.model-select {
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid var(--border-color);
    background-color: var(--input-bg);
    color: var(--text-primary);
}

/* Welcome Screen */
.welcome-screen {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    max-width: 800px;
    margin: 0 auto;
    width: 100%;
}

.welcome-screen h1 {
    font-size: 2rem;
    margin-bottom: 2rem;
    color: var(--text-primary);
}

.input-box {
    display: flex;
    gap: 1rem;
    width: 100%;
    max-width: 800px;  /* Aumentado de 600px para 800px */
    margin-bottom: 2rem;
    position: relative;
}

.input-box textarea {
    width: 100%;
    padding: 1rem;  /* Aumentado de 0.75rem para 1rem */
    padding-right: 3.5rem;  /* Aumentado para dar mais espaço ao botão */
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    background-color: var(--input-bg);
    color: var(--text-primary);
    font-size: 1rem;
    resize: none;
    min-height: 56px;  /* Aumentado de 44px para 56px */
    max-height: 200px;
    line-height: 1.5;
    scrollbar-width: none;
    -ms-overflow-style: none;
}

.input-box textarea::-webkit-scrollbar {
    display: none;
}

.input-box .send-btn,
.input-box .stop-btn {
    position: absolute;
    right: 0.75rem;
    bottom: 0.75rem;
    background: transparent;
    border: none;
    color: var(--text-primary);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 4px;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
}

.input-box .send-btn:hover,
.input-box .stop-btn:hover {
    background-color: var(--action-hover);
}

/* Estilo do botão de Stop */
.input-box .stop-btn {
    position: absolute;
    right: 5rem; /* Ajuste a posição conforme necessário */
    bottom: 0.5rem;
    background: transparent;
    border: none;
    color: var(--text-primary);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 4px;
    transition: all 0.2s;
}

.input-box .stop-btn:hover {
    background-color: var(--action-hover);
}

.quick-actions {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    width: 100%;
    max-width: 600px;
}

.quick-action-btn {
    padding: 1rem;
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    background-color: var(--input-bg);
    color: var(--text-primary);
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s;
}

.quick-action-btn:hover {
    background-color: var(--action-hover);
}

/* Chat Container */
.chat-container {
    flex: 1;
    overflow-y: auto;
    padding: 2rem;
    max-width: 800px;
    margin: 0 auto;
    width: 100%;
    scrollbar-width: none;
    -ms-overflow-style: none;
}

.chat-container::-webkit-scrollbar {
    display: none;
}

.message {
    position: relative;
    max-width: 80%;
    margin-bottom: 1.5rem;
    padding: 1rem;
    border-radius: 0.5rem;
    line-height: 1.5;
}

.message.user {
    background-color: var(--msg-user);
    margin-left: auto;
    color: var(--text-primary);
}

.message.assistant {
    background-color: var(--msg-bot);
    margin-right: auto;
    color: var(--text-primary);
}

.message .message-actions {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    display: none;
    gap: 0.5rem;
}

.message:hover .message-actions {
    display: flex;
}

.message .action-btn {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    padding: 0.5rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
}

.message .action-btn:hover {
    background-color: var(--action-hover);
    color: var(--text-primary);
}

/* Input Container */
.input-container {
    padding: 1.5rem;
    border-top: 1px solid var(--border-color);
    max-width: 800px;
    margin: 0 auto;
    width: 100%;
}

/* Loading Animation */
.loading {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    padding: 1rem;
}

.loading span {
    width: 8px;
    height: 8px;
    background-color: var(--text-primary);
    border-radius: 50%;
    animation: bounce 0.5s alternate infinite;
}

.loading span:nth-child(2) {
    animation-delay: 0.1s;
}

.loading span:nth-child(3) {
    animation-delay: 0.2s;
}

@keyframes bounce {
    to {
        transform: translateY(-4px);
    }
}

/* Responsividade */
@media (max-width: 768px) {
    .sidebar {
        width: 100%;
    }
    
    .main-content {
        margin-left: 0;
    }
    
    .chat-container,
    .input-container,
    .welcome-screen {
        padding: 1rem;
    }
    
    .quick-actions {
        grid-template-columns: 1fr;
    }
}


Conteúdo de .gitkeep:


Conteúdo de reset.css:
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    transition: background-color 0.2s, color 0.2s;
}

body {
    font-family: 'Inter', sans-serif;
    background-color: var(--bg-primary);
    color: var(--text-primary);
    overflow: hidden;
}

Conteúdo de typography.css:
body {
    font-family: 'Inter', sans-serif;
    color: var(--text-primary);
}

h1, h2, h3, h4, h5, h6 {
    color: var(--text-primary);
}

Conteúdo de variables.css:
:root {
    --bg-primary: #f7f7f8;
    --text-primary: #000000;
    --text-secondary: rgba(0, 0, 0, 0.7);
    --text-disabled: rgba(0, 0, 0, 0.5);
    --action-active: #000000;
    --action-hover: rgba(0, 0, 0, 0.08);
    --action-selected: rgba(0, 0, 0, 0.16);
    --action-disabled: rgba(0, 0, 0, 0.3);
    --action-disabled-background: rgba(0, 0, 0, 0.12);
    --msg-user: #e6e6e6;
    --msg-bot: #d9d9d9;
    --sidebar-bg: #ffffff;
    --input-bg: #ffffff;
    --border-color: rgba(0, 0, 0, 0.12);
}

[data-theme="dark"] {
    --bg-primary: #343541;
    --text-primary: #fff;
    --text-secondary: rgba(255, 255, 255, 0.7);
    --text-disabled: rgba(255, 255, 255, 0.5);
    --action-active: #fff;
    --action-hover: rgba(255, 255, 255, 0.08);
    --action-selected: rgba(255, 255, 255, 0.16);
    --action-disabled: rgba(255, 255, 255, 0.3);
    --action-disabled-background: rgba(255, 255, 255, 0.12);
    --msg-user: #444654;
    --msg-bot: #444654;
    --sidebar-bg: #202123;
    --input-bg: #40414f;
    --border-color: rgba(255, 255, 255, 0.12);
}

Conteúdo de .gitkeep:


Conteúdo de buttons.css:
.new-chat-btn {
    background-color: #19c37d;
    color: white;
    border: none;
    padding: 12px;
    border-radius: 5px;
    cursor: pointer;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
}

.new-chat-btn:hover {
    background-color: #15a76c;
}

.settings-btn {
    margin-top: auto;
    padding: 12px;
    border: none;
    border-radius: 5px;
    background-color: transparent;
    color: var(--text-primary);
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: background-color 0.2s;
}

.settings-btn:hover {
    background-color: var(--action-hover);
}

.theme-toggle, .header-sidebar-toggle {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--action-hover);
    border: none;
    border-radius: 4px;
    color: var(--text-primary);
    cursor: pointer;
}

.theme-toggle:hover, .header-sidebar-toggle:hover {
    background: var(--action-selected);
}

.quick-action-btn {
    padding: 1rem;
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    background-color: var(--input-bg);
    color: var(--text-primary);
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s;
}

.quick-action-btn:hover {
    background-color: var(--action-hover);
}

Conteúdo de forms.css:
.search-box {
    position: relative;
    margin-bottom: 1rem;
}

.search-box input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    background-color: var(--input-bg);
    color: var(--text-primary);
}

.input-box {
    display: flex;
    gap: 1rem;
    width: 100%;
    max-width: 800px;
    margin-bottom: 2rem;
    position: relative;
}

.input-box textarea {
    width: 100%;
    padding: 1rem;
    padding-right: 3.5rem;
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    background-color: var(--input-bg);
    color: var(--text-primary);
    font-size: 1rem;
    resize: none;
    min-height: 56px;
    max-height: 200px;
    line-height: 1.5;
    scrollbar-width: none;
    -ms-overflow-style: none;
}

.input-box textarea::-webkit-scrollbar {
    display: none;
}

.input-box .send-btn,
.input-box .stop-btn {
    position: absolute;
    right: 0.75rem;
    bottom: 0.75rem;
    background: transparent;
    border: none;
    color: var(--text-primary);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 4px;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
}

.input-box .send-btn:hover,
.input-box .stop-btn:hover {
    background-color: var(--action-hover);
}

.input-box .stop-btn {
    right: 5rem;
    bottom: 0.5rem;
}

.quick-actions {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    width: 100%;
    max-width: 600px;
}

.model-select {
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid var(--border-color);
    background-color: var(--input-bg);
    color: var(--text-primary);
}

Conteúdo de .gitkeep:


Conteúdo de container.css:
.container {
    display: flex;
    height: 100vh;
    position: relative;
}

.input-container {
    padding: 1.5rem;
    border-top: 1px solid var(--border-color);
    max-width: 800px;
    margin: 0 auto;
    width: 100%;
}

/* Loading Animation */
.loading {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    padding: 1rem;
}

.loading span {
    width: 8px;
    height: 8px;
    background-color: var(--text-primary);
    border-radius: 50%;
    animation: bounce 0.5s alternate infinite;
}

.loading span:nth-child(2) {
    animation-delay: 0.1s;
}

.loading span:nth-child(3) {
    animation-delay: 0.2s;
}

@keyframes bounce {
    to {
        transform: translateY(-4px);
    }
}

Conteúdo de main-content.css:
.main-content {
    flex: 1;
    margin-left: 260px;
    transition: margin-left 0.3s ease;
    display: flex;
    flex-direction: column;
    height: 100vh;
}

.main-content.expanded {
    margin-left: 0;
}

.chat-container {
    flex: 1;
    overflow-y: auto;
    padding: 2rem;
    max-width: 800px;
    margin: 0 auto;
    width: 100%;
    scrollbar-width: none;
    -ms-overflow-style: none;
}

.chat-container::-webkit-scrollbar {
    display: none;
}

.message {
    position: relative;
    max-width: 80%;
    margin-bottom: 1.5rem;
    padding: 1rem;
    border-radius: 0.5rem;
    line-height: 1.5;
}

.message.user {
    background-color: var(--msg-user);
    margin-left: auto;
    color: var(--text-primary);
}

.message.assistant {
    background-color: var(--msg-bot);
    margin-right: auto;
    color: var(--text-primary);
}

.message .message-actions {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    display: none;
    gap: 0.5rem;
}

.message:hover .message-actions {
    display: flex;
}

.message .action-btn {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    padding: 0.5rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
}

.message .action-btn:hover {
    background-color: var(--action-hover);
    color: var(--text-primary);
}

/* Top Bar */
.top-bar {
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
    border-bottom: 1px solid var(--border-color);
    background-color: var(--bg-primary);
}

.top-bar-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
}

/* Welcome Screen */
.welcome-screen {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    max-width: 800px;
    margin: 0 auto;
    width: 100%;
}

.welcome-screen h1 {
    font-size: 2rem;
    margin-bottom: 2rem;
    color: var(--text-primary);
}

Conteúdo de sidebar.css:
.sidebar {
    position: fixed;
    width: 260px;
    height: 100vh;
    background-color: var(--sidebar-bg);
    padding: 1rem;
    border-right: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    transition: transform 0.3s ease;
    z-index: 1000;
}

.sidebar.collapsed {
    transform: translateX(-260px);
}

.chat-list {
    flex: 1;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: var(--text-disabled) transparent;
}

.chat-list::-webkit-scrollbar {
    width: 5px;
}

.chat-list::-webkit-scrollbar-track {
    background: transparent;
}

.chat-list::-webkit-scrollbar-thumb {
    background-color: var(--text-disabled);
    border-radius: 20px;
}

.chat-item {
    padding: 0.75rem;
    border-radius: 5px;
    cursor: pointer;
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    transition: background-color 0.2s;
}

.chat-item:hover {
    background-color: var(--action-hover);
}

.chat-item .action-buttons {
    display: none;
    gap: 0.5rem;
}

.chat-item:hover .action-buttons {
    display: flex;
}

.chat-item .action-btn {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    padding: 0.5rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
}

.chat-item .action-btn:hover {
    background-color: var(--action-hover);
    color: var(--text-primary);
}

Conteúdo de styles.css:
/* Reset e variáveis base */
@import './base/variables.css';
@import './base/reset.css';
@import './base/typography.css';

/* Layouts principais */
@import './layout/container.css';
@import './layout/sidebar.css';
@import './layout/main-content.css';

/* Componentes */
@import './components/buttons.css';
@import './components/forms.css';

/* Temas */
@import './themes/light-theme.css';
@import './themes/dark-theme.css';

Conteúdo de .gitkeep:


Conteúdo de dark-theme.css:
[data-theme="dark"] {
    --bg-primary: #343541;
    --text-primary: #fff;
    --text-secondary: rgba(255, 255, 255, 0.7);
    --msg-user: #444654;
    --msg-bot: #444654;
    --sidebar-bg: #202123;
    --input-bg: #40414f;
}

Conteúdo de light-theme.css:
:root {
    --bg-primary: #f7f7f8;
    --text-primary: #000000;
    --text-secondary: rgba(0, 0, 0, 0.7);
    --msg-user: #e6e6e6;
    --msg-bot: #d9d9d9;
    --sidebar-bg: #ffffff;
    --input-bg: #ffffff;
}

Conteúdo de chatActions.js:
import { mostrarCarregamento } from './chatUI.js';
import { adicionarMensagem } from './chatUI.js';
import { adicionarMensagemAoHistorico } from './chatStorage.js';

let abortController = null;

export async function enviarMensagem(mensagem, input, chatContainer, sendBtn, stopBtn) {
    if (!mensagem.trim()) return;

    input.value = '';
    input.style.height = 'auto';
    
    const loadingDiv = mostrarCarregamento(chatContainer);
    let accumulatedMessage = '';

    sendBtn.style.display = 'none';
    stopBtn.style.display = 'flex';

    abortController = new AbortController();

    try {
        const response = await fetch('/send_message', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                message: mensagem,
                conversation_id: window.conversaAtual?.id
            }),
            signal: abortController.signal
        });

        if (!response.ok) {
            throw new Error('Erro na resposta do servidor');
        }

        const reader = response.body.getReader();
        const decoder = new TextDecoder('utf-8');

        while (true) {
            const { value, done } = await reader.read();
            if (done) break;

            const chunk = decoder.decode(value, { stream: true });
            const lines = chunk.split('\n');

            for (const line of lines) {
                if (line.startsWith('data: ')) {
                    try {
                        const jsonData = JSON.parse(line.slice(6));
                        if (jsonData.content) {
                            accumulatedMessage += jsonData.content;
                            loadingDiv.innerHTML = `<p>${accumulatedMessage.replace(/\n/g, '<br>')}</p>`;
                            chatContainer.scrollTop = chatContainer.scrollHeight;
                        }
                    } catch (e) {
                        console.error('Erro ao processar chunk:', e);
                    }
                }
            }
        }

        loadingDiv.remove();
        adicionarMensagem(chatContainer, accumulatedMessage, 'assistant');
        adicionarMensagemAoHistorico(accumulatedMessage, 'assistant');
        
    } catch (erro) {
        if (erro.name === 'AbortError') {
            console.log('Geração de resposta interrompida pelo usuário');
            loadingDiv.remove();
            if (accumulatedMessage) {
                adicionarMensagem(chatContainer, accumulatedMessage, 'assistant');
                adicionarMensagemAoHistorico(accumulatedMessage, 'assistant');
            }
        } else {
            console.error('Erro:', erro);
            loadingDiv.remove();
            const mensagemErro = 'Erro ao conectar com o servidor. Por favor, tente novamente.';
            adicionarMensagem(chatContainer, mensagemErro, 'assistant');
            adicionarMensagemAoHistorico(mensagemErro, 'assistant');
        }
    } finally {
        sendBtn.style.display = 'flex';
        stopBtn.style.display = 'none';
        abortController = null;
    }
}

export function interromperResposta() {
    if (abortController) {
        abortController.abort();
    }
}

Conteúdo de chatStorage.js:
import { adicionarMensagem } from './chatUI.js';

export function carregarConversa(id) {
    const conversa = window.conversas.find(c => c.id === id);
    if (!conversa) return;

    window.conversaAtual = conversa;
    const chatContainer = document.querySelector('.chat-container');
    const welcomeScreen = document.querySelector('.welcome-screen');
    const inputContainer = document.querySelector('.input-container');
    
    welcomeScreen.style.display = 'none';
    chatContainer.style.display = 'block';
    inputContainer.style.display = 'block';
    chatContainer.innerHTML = '';
    
    conversa.mensagens.forEach(msg => {
        adicionarMensagem(chatContainer, msg.conteudo, msg.tipo);
    });
}

export function atualizarListaConversas() {
    const chatList = document.querySelector('.chat-list');
    if (!chatList) return;

    chatList.innerHTML = '';
    window.conversas.forEach(conversa => {
        const conversaElement = document.createElement('div');
        conversaElement.className = 'chat-item';
        if (window.conversaAtual && window.conversaAtual.id === conversa.id) {
            conversaElement.classList.add('active');
        }
        
        conversaElement.onclick = () => carregarConversa(conversa.id);
        
        const primeiraMsg = conversa.mensagens.find(m => m.tipo === 'user')?.conteudo || 'Nova conversa';
        const titulo = conversa.titulo || primeiraMsg.substring(0, 30) + (primeiraMsg.length > 30 ? '...' : '');
        
        conversaElement.innerHTML = `
            <span>${titulo}</span>
            <div class="action-buttons">
                <button class="action-btn" onclick="event.stopPropagation(); window.renomearConversa('${conversa.id}')">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="action-btn" onclick="event.stopPropagation(); window.excluirConversa('${conversa.id}')">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        chatList.appendChild(conversaElement);
    });
}

export function criarNovaConversa() {
    const novaConversa = {
        id: Date.now().toString(),
        titulo: 'Nova conversa',
        mensagens: []
    };
    
    window.conversas.unshift(novaConversa);
    window.conversaAtual = null;
    atualizarListaConversas();
}

export function adicionarMensagemAoHistorico(mensagem, tipo) {
    if (!window.conversaAtual) {
        const novaConversa = {
            id: Date.now().toString(),
            titulo: 'Nova conversa',
            mensagens: []
        };
        window.conversas.unshift(novaConversa);
        window.conversaAtual = novaConversa;
    }
    
    window.conversaAtual.mensagens.push({
        tipo,
        conteudo: mensagem,
        timestamp: new Date().toISOString()
    });
    
    atualizarListaConversas();
}

export function renomearConversa(id) {
    const conversa = window.conversas.find(c => c.id === id);
    if (!conversa) return;

    const novoTitulo = prompt('Digite o novo título da conversa:', conversa.titulo);
    if (novoTitulo && novoTitulo.trim()) {
        conversa.titulo = novoTitulo.trim();
        atualizarListaConversas();
    }
}

export function excluirConversa(id) {
    if (!confirm('Tem certeza que deseja excluir esta conversa?')) return;
    
    window.conversas = window.conversas.filter(c => c.id !== id);
    
    if (window.conversaAtual && window.conversaAtual.id === id) {
        window.conversaAtual = null;
        const welcomeScreen = document.querySelector('.welcome-screen');
        const chatContainer = document.querySelector('.chat-container');
        const inputContainer = document.querySelector('.input-container');
        
        welcomeScreen.style.display = 'flex';
        chatContainer.style.display = 'none';
        inputContainer.style.display = 'none';
        
        document.querySelector('#welcome-input').value = '';
        document.querySelector('#chat-input').value = '';
    }
    
    atualizarListaConversas();
}

Conteúdo de chatUI.js:
import { escapeHTML } from './chatUtils.js';

export function iniciarChat(welcomeScreen, chatContainer, inputContainer) {
    welcomeScreen.style.display = 'none';
    chatContainer.style.display = 'block';
    inputContainer.style.display = 'block';
    chatContainer.innerHTML = '';
}

export function mostrarTelaInicial(welcomeScreen, chatContainer, inputContainer, welcomeInput, chatInput) {
    welcomeScreen.style.display = 'flex';
    chatContainer.style.display = 'none';
    inputContainer.style.display = 'none';
    welcomeInput.value = '';
    chatInput.value = '';
}

export function adicionarMensagem(chatContainer, texto, tipo) {
    const mensagemDiv = document.createElement('div');
    mensagemDiv.className = `message ${tipo}`;
    mensagemDiv.innerHTML = `
        <p>${escapeHTML(texto).replace(/\n/g, '<br>')}</p>
        <div class="message-actions">
            <button class="action-btn" onclick="copiarMensagem(this)">
                <i class="fas fa-copy"></i>
            </button>
            ${tipo === 'assistant' ? `
                <button class="action-btn" onclick="regenerarResposta(this)">
                    <i class="fas fa-redo"></i>
                </button>
            ` : ''}
        </div>
    `;
    chatContainer.appendChild(mensagemDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

export function mostrarCarregamento(chatContainer) {
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading message assistant';
    loadingDiv.innerHTML = `
        <span></span>
        <span></span>
        <span></span>
    `;
    chatContainer.appendChild(loadingDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
    return loadingDiv;
}

Conteúdo de chatUtils.js:
export function escapeHTML(text) {
    const div = document.createElement('div');
    div.innerText = text;
    return div.innerHTML;
}

export function copiarMensagem(button) {
    const mensagem = button.closest('.message').querySelector('p').textContent;
    navigator.clipboard.writeText(mensagem);
}

export function regenerarResposta(button) {
    const mensagem = button.closest('.message').previousElementSibling.querySelector('p').textContent;
    const chatContainer = button.closest('.chat-container');
    const chatInput = document.querySelector('#chat-input');
    const sendBtn = document.querySelector('#send-btn');
    const stopBtn = document.querySelector('#stop-btn');
    
    if (chatInput && sendBtn && stopBtn) {
        chatInput.value = mensagem;
        const form = chatInput.closest('form');
        if (form) {
            form.dispatchEvent(new Event('submit'));
        }
    }
}

Conteúdo de chat.js:
import { 
    iniciarChat,
    mostrarTelaInicial,
    adicionarMensagem,
    mostrarCarregamento
} from './chat/chatUI.js';

import {
    enviarMensagem,
    interromperResposta
} from './chat/chatActions.js';

import {
    carregarConversa,
    atualizarListaConversas,
    criarNovaConversa,
    adicionarMensagemAoHistorico,
    renomearConversa,
    excluirConversa
} from './chat/chatStorage.js';

export {
    iniciarChat,
    mostrarTelaInicial,
    adicionarMensagem,
    enviarMensagem,
    interromperResposta,
    carregarConversa,
    atualizarListaConversas,
    criarNovaConversa,
    adicionarMensagemAoHistorico,
    renomearConversa,
    excluirConversa
};

Conteúdo de events.js:
// Importações necessárias
import { toggleTheme } from './theme.js';
import { toggleSidebar } from './sidebar.js';
import { configureTextarea } from './textarea.js';
import { enviarMensagem } from './chat/chatActions.js'; // Importando a função enviarMensagem

export function configureEventListeners() {
    const themeToggle = document.querySelector('.theme-toggle');
    const modelSelect = document.querySelector('.model-select');
    const sidebarToggle = document.querySelector('.sidebar-toggle');
    const headerSidebarToggle = document.querySelector('.header-sidebar-toggle');
    const chatInput = document.querySelector('#chat-input'); // Campo de entrada de chat
    const sendButton = document.querySelector('#send-button'); // Botão de envio

    // Event Listeners
    themeToggle?.addEventListener('click', toggleTheme);
    sidebarToggle?.addEventListener('click', toggleSidebar);
    headerSidebarToggle?.addEventListener('click', toggleSidebar);

    modelSelect?.addEventListener('change', (e) => {
        window.currentModel = e.target.value;
    });

    // Configurar textareas
    configureTextarea(chatInput);
    configureTextarea(document.querySelector('#welcome-input'));

    // Adicionando evento de envio de mensagem
    sendButton?.addEventListener('click', () => {
        const mensagem = chatInput.value;
        enviarMensagem(mensagem, chatInput, document.querySelector('.chat-container'), sendButton, document.querySelector('#stop-button'));
    });

    chatInput?.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            const mensagem = chatInput.value;
            enviarMensagem(mensagem, chatInput, document.querySelector('.chat-container'), sendButton, document.querySelector('#stop-button'));
            e.preventDefault(); // Evita a quebra de linha
        }
    });
}


Conteúdo de init.js:
import { initializeTheme } from './theme.js';
import { configureEventListeners } from './events.js';

document.addEventListener('DOMContentLoaded', () => {
    initializeTheme();
    configureEventListeners();
});

Conteúdo de main.js:
import './init.js';
import { 
    iniciarChat,
    mostrarTelaInicial,
    adicionarMensagem,
    enviarMensagem,
    interromperResposta,
    carregarConversa,
    atualizarListaConversas,
    criarNovaConversa,
    adicionarMensagemAoHistorico,
    renomearConversa,
    excluirConversa
} from './chat.js';

// Estado global
window.currentModel = 'gemma2:2b';
window.conversas = [];
window.conversaAtual = null;

document.addEventListener('DOMContentLoaded', () => {
    const welcomeForm = document.getElementById('welcome-form');
    const chatForm = document.getElementById('chat-form');
    const chatContainer = document.querySelector('.chat-container');
    const welcomeInput = document.getElementById('welcome-input');
    const chatInput = document.getElementById('chat-input');
    const sendBtn = document.getElementById('send-btn');
    const stopBtn = document.getElementById('stop-btn');
    const newChatBtn = document.querySelector('.new-chat-btn');

    // Configurar botão de nova conversa
    newChatBtn?.addEventListener('click', () => {
        window.conversaAtual = null;
        mostrarTelaInicial(
            document.querySelector('.welcome-screen'),
            chatContainer,
            document.querySelector('.input-container'),
            welcomeInput,
            chatInput
        );
    });

    welcomeForm?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const message = welcomeInput.value.trim();
        if (!message) return;

        // Criar nova conversa se não existir
        if (!window.conversaAtual) {
            const novaConversa = {
                id: Date.now().toString(),
                titulo: 'Nova conversa',
                mensagens: []
            };
            window.conversas.unshift(novaConversa);
            window.conversaAtual = novaConversa;
            atualizarListaConversas();
        }

        iniciarChat(
            document.querySelector('.welcome-screen'),
            chatContainer,
            document.querySelector('.input-container')
        );

        adicionarMensagem(chatContainer, message, 'user');
        adicionarMensagemAoHistorico(message, 'user');
        
        await enviarMensagem(message, welcomeInput, chatContainer, sendBtn, stopBtn);
    });

    chatForm?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const message = chatInput.value.trim();
        if (!message) return;

        adicionarMensagem(chatContainer, message, 'user');
        adicionarMensagemAoHistorico(message, 'user');
        
        await enviarMensagem(message, chatInput, chatContainer, sendBtn, stopBtn);
    });

    // Configurar botão de parar resposta
    stopBtn?.addEventListener('click', () => {
        interromperResposta();
    });

    // Inicializar lista de conversas
    atualizarListaConversas();
});

// Expor funções globalmente
window.carregarConversa = carregarConversa;
window.criarNovaConversa = criarNovaConversa;
window.adicionarMensagemAoHistorico = adicionarMensagemAoHistorico;
window.interromperResposta = interromperResposta;
window.renomearConversa = renomearConversa;
window.excluirConversa = excluirConversa;

Conteúdo de sidebar.js:
export function toggleSidebar() {
    const sidebar = document.querySelector('.sidebar');
    const mainContent = document.querySelector('.main-content');
    
    sidebar.classList.toggle('collapsed');
    mainContent.classList.toggle('expanded');
}

Conteúdo de textarea.js:
export function configureTextarea(textarea) {
    if (!textarea) return;

    textarea.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
    });

    textarea.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            const form = this.closest('form');
            if (form) {
                const event = new Event('submit', {
                    'bubbles': true,
                    'cancelable': true
                });
                form.dispatchEvent(event);
            }
        }
    });
}

Conteúdo de theme.js:
// Estado do tema
let currentTheme = 'light';

// Função para alternar o tema
export function toggleTheme() {
    currentTheme = currentTheme === 'light' ? 'dark' : 'light';
    document.documentElement.setAttribute('data-theme', currentTheme);
    localStorage.setItem('theme', currentTheme);
    
    const themeToggle = document.querySelector('.theme-toggle');
    if (themeToggle) {
        themeToggle.innerHTML = currentTheme === 'light' 
            ? '<i class="fas fa-moon"></i>' 
            : '<i class="fas fa-sun"></i>';
    }
}

// Função para inicializar o tema
export function initializeTheme() {
    const savedTheme = localStorage.getItem('theme') || 'light';
    if (savedTheme === 'dark') {
        toggleTheme();
    }
}

Conteúdo de utils.js:
export function escapeHTML(text) {
    const div = document.createElement('div');
    div.innerText = text;
    return div.innerHTML;
}

export function mostrarCarregamento(chatContainer) {
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading message assistant';
    loadingDiv.innerHTML = `
        <span></span>
        <span></span>
        <span></span>
    `;
    chatContainer.appendChild(loadingDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
    return loadingDiv;
}

Conteúdo de index.html:
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Chat</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <div class="container">
        <!-- Barra Lateral -->
        <aside class="sidebar">
            <button class="new-chat-btn">
                <i class="fas fa-plus"></i>
                Novo Chat
            </button>
            <div class="search-box">
                <input type="text" id="search-input" placeholder="Pesquisar conversas...">
            </div>
            <div class="chat-list">
                <!-- Lista de conversas será preenchida via JavaScript -->
            </div>
            <button class="settings-btn">
                <i class="fas fa-cog"></i>
                Configurações
            </button>
        </aside>

        <!-- Conteúdo Principal -->
        <main class="main-content">
            <div class="top-bar">
                <button class="header-sidebar-toggle">
                    <i class="fas fa-bars"></i>
                </button>
                <h1 class="program-name">AI  </h1>
                <div class="top-bar-actions">
                    <button class="theme-toggle">
                        <i class="fas fa-moon"></i>
                    </button>
                    <select class="model-select">
                        <option value="gemma2:2b">gemma2:2b</option>
                    </select>
                </div>
            </div>

            <!-- Tela de Boas-vindas -->
            <div class="welcome-screen">
                <h1>Como posso ajudar?</h1>
                <form class="input-box" id="welcome-form">
                    <textarea id="welcome-input" placeholder="Envie uma mensagem..." rows="1"></textarea>
                    <button type="submit" class="send-btn">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </form>
                <div class="quick-actions">
                    <button class="quick-action-btn">
                        <i class="fas fa-lightbulb"></i>
                        Sugerir ideias
                    </button>
                    <button class="quick-action-btn">
                        <i class="fas fa-file-alt"></i>
                        Resumir texto
                    </button>
                    <button class="quick-action-btn">
                        <i class="fas fa-code"></i>
                        Ajuda com código
                    </button>
                    <button class="quick-action-btn">
                        <i class="fas fa-question-circle"></i>
                        Tirar dúvidas
                    </button>
                </div>
            </div>

            <!-- Container de Chat -->
            <div class="chat-container" style="display: none;">
                <!-- Mensagens serão inseridas aqui -->
            </div>

            <!-- Container de Input -->
            <div class="input-container" style="display: none;">
                <form class="input-box" id="chat-form">
                    <textarea id="chat-input" placeholder="Digite sua mensagem..." rows="1"></textarea>
                    <button type="submit" class="send-btn" id="send-btn">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                    <button type="button" class="stop-btn" id="stop-btn" style="display: none;">
                        <i class="fas fa-stop"></i>
                    </button>
                </form>
            </div>
        </main>
    </div>

    <script type="module" src="{{ url_for('static', filename='js/theme.js') }}"></script>
    <script type="module" src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>


Conteúdo de chat_history.py:
import json
from datetime import datetime
import os

HISTORY_FILE = 'data/chat_history.json'

def ensure_data_directory():
    os.makedirs('data', exist_ok=True)

def get_conversation_history():
    ensure_data_directory()
    try:
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except json.JSONDecodeError as e:
        print(f"Erro ao carregar histórico: {str(e)}")
        return []  # Retorna uma lista vazia em caso de erro
    except Exception as e:
        print(f"Erro ao carregar histórico: {str(e)}")
        return []  # Retorna uma lista vazia em caso de erro

def get_conversation_by_id(conversation_id):
    """Busca uma conversa específica pelo ID"""
    conversations = get_conversation_history()
    for conversation in conversations:
        if conversation['id'] == conversation_id:
            return conversation
    return None
  
def save_conversation(message, response, conversation_id=None):
    """
    Salva ou atualiza uma conversa no histórico.
    Se conversation_id for fornecido, atualiza a conversa existente.
    Caso contrário, cria uma nova conversa.
    """
    ensure_data_directory()
    try:
        # Carrega o histórico atual
        conversations = get_conversation_history()
        
        if conversation_id:
            # Atualiza conversa existente
            updated = False
            for conversation in conversations:
                if conversation['id'] == conversation_id:
                    conversation['messages'].extend([
                        {'role': 'user', 'content': message},
                        {'role': 'assistant', 'content': response}
                    ])
                    conversation['timestamp'] = datetime.now().isoformat()
                    updated = True
                    break
            
            # Se não encontrou o ID, cria uma nova conversa (backup seguro)
            if not updated:
                conversation_id = str(len(conversations) + 1)
                new_conversation = {
                    'id': conversation_id,
                    'timestamp': datetime.now().isoformat(),
                    'messages': [
                        {'role': 'user', 'content': message},
                        {'role': 'assistant', 'content': response}
                    ]
                }
                conversations.append(new_conversation)
        else:
            # Cria nova conversa
            conversation_id = str(len(conversations) + 1)
            new_conversation = {
                'id': conversation_id,
                'timestamp': datetime.now().isoformat(),
                'messages': [
                    {'role': 'user', 'content': message},
                    {'role': 'assistant', 'content': response}
                ]
            }
            conversations.append(new_conversation)
        
        # Salva as conversas atualizadas
        with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(conversations, f, ensure_ascii=False, indent=2)
        
        return conversation_id
    except Exception as e:
        print(f"Erro ao salvar conversa: {str(e)}")
        return None
 

Conteúdo de text_processor.py:
def split_text(text, words_per_chunk=300):
    """
    Divide um texto em chunks menores baseado no número de palavras.
    """
    words = text.split()
    chunks = []
    
    for i in range(0, len(words), words_per_chunk):
        chunk = ' '.join(words[i:i + words_per_chunk])
        chunks.append(chunk)
    
    return chunks


==========================================
Estrutura de pastas:
==========================================
trunk - 03022025
    app.py
    atualiza-git.bat
    backend
        database
            database.py
        models
            conversations.py
            messages.py
        routers
            chats.py
        utils
            chat_history.py
            text_processor.py
            __init__.py
        __init__.py
    desktop.ini
    folderico-red.ico
    README.md
    static
        css
            backup.cssx
            base
                .gitkeep
                reset.css
                typography.css
                variables.css
            components
                .gitkeep
                buttons.css
                forms.css
            layout
                .gitkeep
                container.css
                main-content.css
                sidebar.css
            styles.css
            themes
                .gitkeep
                dark-theme.css
                light-theme.css
        js
            chat
                chatActions.js
                chatStorage.js
                chatUI.js
                chatUtils.js
            chat.js
            events.js
            init.js
            main.js
            sidebar.js
            textarea.js
            theme.js
            utils.js
    templates
        index.html
    utils
        chat_history.py
        text_processor.py
